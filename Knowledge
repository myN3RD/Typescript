Typescript = Javascript + A type system


ts is NOT checking the code for LOGIC errors!
its JUST for checking TYPE errors!




sudo npm install -g parcel-bundler



TO RUN THE APP with parcel
______________

npx parcel index.html





OPTIONAL

sudo npm install @faker-js/faker

sudo npm install faker


-- add this in every file where we use --
// for updating faker
import { faker } from "@faker-js/faker"; 





            THE TYPESCRIPT TYPE SYSTEM
        
_____________________________________________

Helps us catch errors during development -> Is a Helper to catch Errors

Only active during development

Doesnt provide any performance optimazation

Uses 'type annotations' to analyse our code




    Typescript Code (Javascript with annotations)
                    
                    ⬇
                    
             Typescript Compiler
             
                    ⬇
                      
            Plain old Javascript
            
       
       
       
       
            ENVIRONMENT SETUP
        
_____________________________________________

sudo npm install -g typescript ts-node

tsc --help    -> for checking that its working

npm init -> we have to create a package.json file before we install axios!

npm install axios    (we use this to make a netword request) -> check if there is a axios folder now in the node modules folder!



            COMPILE
        
_____________________________________________

in terminal:

we have to go to the folder where the file sits which we want to compile


command:
tsc filename
tsc index.ts -> in the file explorer of VSCode is now a new ..js file -> thats the compiled version of out ts code

NOW 
in terminal:
node index.js

INSTEAD 2 commands -> we can use what we have installed before -> sudo npm install -g typescript ts-node

command:
ts-node filename -> this will safe us to make node index.ts AND node index.js -> so just one command instead of two
ts-node index.ts



           REAL TYPESCRIPT
_____________________________________________

interface -> "used to define the structure of an object"

its for telling ts the properties we are using (we dont have to use ALL properties! Just the ones we want)



           TYPESCRIPT SYSTEM
_____________________________________________


        there a two main field of knowledge in ts
            


Syntax + Features       vs          Design Patterns with TS
_________________                   _______________________

                                           FOKUS
                                           
                                           
                                           
           TS TYPES                                          
 _____________________________________________
  
 every value is ts has a type!
 
 
 in TS a number is a number
 
 
 
 
        ->    Primitive types -> number, boolean, void, undefined, string, symbol, null
 
TYPES 
 
        ->    Object Types -> functions, arrays, classes, objects
        
        
        
           TYPE ANNOTATION                                          
 _____________________________________________
  we tell ts the type
  
  
  with Variables
  ______________
  
            const apples: number = 5;
            let speed: string = 'fast';
            let hasName: boolean = true;

            let nothingMuch: null = null;
            let nothing: undefined = undefined;

            // build in objects
            let now: Date = new Date();
            
  
  
                  functions
  
                              This is the annutation, /a discription of the actuall function  /  AFTER  void start the actuall function
            const logNumber: (i: number) => void = (i: number) => {
              console.log(i);
            }
            
                  objects
  
            // Array
            let colors: string[] = ['red', 'green', 'blue'];
            let myNumbers: number[] = [1,2,3];
            let truths: boolean[] = [true, true, false, true, false];

            // Classes
            class Car {

            }
            let car: Car = new Car();
            
            
            
            
 with functions
 ______________ 
 
              // a is a number, b is a number     what the function will return
            const add = (a: number, b: number): number => {
              return a + b;
            };

  

            
            
            
            
            
             'any' TYPE // JSON.parse()                                          
 _____________________________________________          
            
// When to use annotaions
// 1. Function that returns the 'any' type
const json = '{"x:": 10, "y": 20}';
const coordinates = JSON.parse(json);
console.log(coordinates); // console now {x: 10, y: 20};


# if we are using JSON.parse() -> ts actually has no clue what types we are using -> so in this case of using JSON.parse(), every type will be type 'any'!
AVOID variables with 'any' at all costs!!! otherwise ts cant rly work and err checking!


#fix with annotation

const json = '{"x:": 10, "y": 20}';
const coordinates: { x: number, y: number } = JSON.parse(json);
console.log(coordinates); // console now {x: 10, y: 20};
  
  
  
             TYPE INFERENCE                                          
 _____________________________________________
  ts guesses the type
  
  
  
  
               ARRAYS IN TS                                          
 _____________________________________________
            
when we work with arrays in ts -> we will just use one specific type of element in an array! 



Still often we need arrays with -> 

            MULTIPLE different TYPES inside one single array
            ________________________________________________
            
for collections of records            

const importantDates: (Date | string) [] = [new Date(), '2030-10-10'];
importantDates.push('2040-05-05');
importantDates.push(new Date);

               TUPLES                                          
            ___________
            
            actually not rly useful in ts
            looks like an array, but its not
            the order is rly important
            
            
            const drink = {
              color: 'brown',
              corbonated: true,
              sugar: 40
            };

            
            this is now a TUPLE not an array anymore
            
                        #because of these annotaions#
            const pepsi: [string, boolean, number] = ['brown', true, 40];
            
            // now we can assign in correct way
            pepsi[0] = 'yellow';
            pepsi[2] = 50;
            
            
            
            
            // this is now a tuple not an array anymore, cause of the added annotations
            const pepsi: [string, boolean, number] = ['brown', true, 40];
            pepsi[0] = 'yellow';
            pepsi[2] = 50;



            // Type alias (tuple) this is not an array! -> this is a tuple what we can use now
            type Drink = [string, boolean, number];

            const fanta: Drink = ['yellow', true, 30];
            pepsi[2] = 40;
            
            
                         
                 
                 
                 
                 
              ! INTERFACES !                                        
 _____________________________________________
 
 when we are creating an interface -> we are creating a new type
 
 we can use one SINGLE INTERFACE to discribe the shape or properties of very different topics
 
 allways use a Capital letter!
 
 
 interface Vehicle {
  name: string,
  year: number,
  broken: boolean
};


            ! CLASSES !                                        
 _____________________________________________
            
 public 
 
 
 private 
 
            has nothing to do with security stuff -> just to protect from breaking code from other developers
 
 
 protected
 
            like private -> we can access the given methods in child classes as well
            
            
            
            
            FIELDS
           ________
